import asyncio
import io
import logging
import re

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BufferedInputFile, BotCommand
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from faststream import FastStream
from faststream.rabbit import RabbitBroker, RabbitExchange, RabbitQueue, RabbitMessage
from pydantic import AmqpDsn, Field, BaseModel, PositiveInt
from pydantic_settings import BaseSettings

# üü© –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
logger = logging.getLogger("faststream")

logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

logger.info('–í–∞–ª–∏–¥–∏—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...')


class Config(BaseSettings):
    BOT_TOKEN: str = Field()
    RABBITMQ_URL: AmqpDsn = Field()
    RABBITMQ_EXCHANGE: str = Field(default="remaindme")
    RABBITMQ_VIDEOLAB_QUEUE_IN: str = Field(default="stt.videolab_in")
    RABBITMQ_VIDEOLAB_QUEUE_OUT: str = Field(default="stt.videolab_out")

    class Config:
        env_file: str = ".env"
        env_file_encoding: str = "utf-8"
        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        extra = "ignore"


config = Config()

logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±—Ä–æ–∫–µ—Ä, –æ–±–º–µ–Ω–Ω–∏–∫ –∏ –æ—á–µ—Ä–µ–¥–∏...')
broker = RabbitBroker(config.RABBITMQ_URL.encoded_string())

exchange = RabbitExchange(config.RABBITMQ_EXCHANGE)

videolab_input_queue = RabbitQueue(config.RABBITMQ_VIDEOLAB_QUEUE_IN)
videolab_output_queue = RabbitQueue(config.RABBITMQ_VIDEOLAB_QUEUE_OUT)


class Text(BaseModel):
    text: str


class Audio(BaseModel):
    audio: str


class SttBaseReminder(BaseModel):
    user_id: PositiveInt
    message_id: PositiveInt


class SttCreateVideoLabDto(SttBaseReminder):
    youtube_url: str


class SttResponseVideoLabDto(SttBaseReminder, Text):
    pass


app = FastStream(broker)
dp = Dispatcher()
bot = Bot(token=config.BOT_TOKEN)

get_text_from_youtube_url = "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ YouTube"

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=get_text_from_youtube_url)]
    ],
    resize_keyboard=True
)


class Form(StatesGroup):
    youtube_url = State()


YOUTUBE_REGEX = re.compile(
    r'^(https?://)?(www\.)?(youtube\.com|youtu\.be)/.+$'
)

transcriptions: dict[int, str] = {}


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
                         reply_markup=main_kb)


@dp.message(F.text == get_text_from_youtube_url)
async def get_youtube_url(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.youtube_url)
    await message.answer(
        "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube",
        reply_markup=ReplyKeyboardRemove(),
    )


@dp.message(Form.youtube_url)
async def process_youtube_url(message: Message, state: FSMContext) -> None:
    try:
        url = message.text.strip()

        if not YOUTUBE_REGEX.match(url):
            await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ üôÇ")
            return

        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube –ø–æ–ª—É—á–µ–Ω–∞, —Å–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –æ—Ç–≤–µ—Ç...", reply_markup=main_kb)

        dto: SttCreateVideoLabDto = SttCreateVideoLabDto(
            youtube_url=url,
            user_id=message.from_user.id,
            message_id=message.message_id,
        )

        await broker.publish(dto, queue=videolab_input_queue, exchange=exchange)
        await state.clear()
    except Exception as e:
        logger.error(e)
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ:\n{e}')


@broker.subscriber(queue=videolab_output_queue, exchange=exchange, no_ack=True)
async def process_transcribed_text(body: SttResponseVideoLabDto, message: RabbitMessage) -> None:
    try:
        MAX_MESSAGE_LENGTH = 4000  # –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        text = body.text
        last_msg = None
        for i in range(0, len(text), MAX_MESSAGE_LENGTH):
            last_msg = await bot.send_message(
                chat_id=body.user_id,
                reply_to_message_id=body.message_id,
                text=text[i:i + MAX_MESSAGE_LENGTH]
            )

        file = BufferedInputFile(io.BytesIO(body.text.encode("utf-8")).getvalue(), filename="transcription.txt")
        if last_msg:
            await bot.send_document(chat_id=body.user_id, reply_to_message_id=last_msg.message_id, document=file,
                                    caption="‚úÖ –í–æ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        else:
            await bot.send_document(chat_id=body.user_id, document=file, caption="‚úÖ –í–æ—Ç —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
        await message.ack()
    except Exception as e:
        logger.error(e)
        await message.nack(requeue=True)


# Run the bot + faststream
async def main() -> None:
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
    ])

    # –∑–∞–ø—É—Å–∫–∞–µ–º faststream –∏ aiogram –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        dp.start_polling(bot),
        app.run()
    )


if __name__ == "__main__":
    asyncio.run(main())
